@page "/vagas"
@using Dtos.Vaga
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JavaScript

<PageTitle>Vagas</PageTitle>

<h3 class="text-2x1 font-bold text-zinc-900">Vagas Disponíveis</h3>

 <div class="flex justify-end">
  <a href="/cadastrar/vaga" class="not-prose cef-add-button">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
    <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
    </svg>
   Cadastrar uma Nova Vaga
  </a>
 </div>

 @if(Vagas is null){ 
  <p>Os dados estão carregando...</p>
 }
 else{ 
  <table class="cef-table"> 
   <thead>
     <tr class="cef-table-row-th">
      <th class="px-4 py-3">Tipo da Vaga</th>
      <th class="px-4 py-3">Número de Vagas</th>
      <th class="px-4 py-3">Salário</th>
      <th class="px-4 py-3">Especificações</th>
      <th class="px-4 py-3">Empresa Ofertante</th>
      <th class="px-4 py-3"></th>
     </tr>
   </thead>
    <tbody>
      @foreach (var vaga in Vagas)
      {
       <tr class="cef-table-row">
        <td class="px-4 py-3">@vaga.TipoVaga</td>
        <td class="px-4 py-3">@vaga.NumeroVagas</td>
        <td class="px-4 py-3">@vaga.Salario</td>
        <td class="px-4 py-3">@vaga.Especificacoes</td>
        <td class="px-4 py-3">@vaga.Empresa.NomeFantasia</td>
        <td class="px-4 py-3">
           @* Botão Editar *@
           <button class="cef-edit-button"  @onclick="() => EditarVaga(vaga.Id)">
             <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none"    viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
             <path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
             </svg>
           </button>

          @* Botão de Exlcuir *@
            <button class="cef-remove-button" @onclick="() => ExcluirVaga(vaga.Id)">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>  
        </td>
       </tr>
      } 
   </tbody> 
  </table>
 }  
 @code{
  private List<VagaResponseDto> Vagas{ get; set; }
  
  protected override async Task OnInitializedAsync()
    {
     Vagas = await Http.GetFromJsonAsync<List<VagaResponseDto>>("/vagas");
    }  
    private void EditarVaga(int id)
    {
       Navigation.NavigateTo($"/vagas/editar/{id}");    
    }
    private async Task ExcluirVaga(int id){
 
    bool excluir = await JavaScript.InvokeAsync<bool>("confirm","Você irá excluir os dados da vaga, certeza que deseja fazer isso?");

    if(excluir){

       @* Mandando a requisição de deletar para API *@
       await Http.DeleteAsync($"/vagas/{id}");

       @* Removendo da lista que exibe na tela principal *@
       Vagas.RemoveAll(vaga => vaga.Id == id); 
    }
  }
 }